
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin20

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "MetabolomicsPipeline"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('MetabolomicsPipeline')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("metabolite_heatmap")
> ### * metabolite_heatmap
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: metabolite_heatmap
> ### Title: Create metabolite heatmap
> ### Aliases: metabolite_heatmap
> 
> ### ** Examples
> 
> # load data
> dat = MetabolomicsPipeline::demoDat
> 
> # Heatmap with one group
> treat_heatmap <- metabolite_heatmap(dat,top_mets = 50,
+                                    group_vars = "GROUP_NAME",
+                                    strat_var = NULL,
+                                    caption = "Heatmap Arranged By Group",
+                                    Assay = "normalized",
+                                    GROUP_NAME)
> 
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("metabolite_pairwise")
> ### * metabolite_pairwise
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: metabolite_pairwise
> ### Title: Metabolite Pairwise Comparisons.
> ### Aliases: metabolite_pairwise
> 
> ### ** Examples
> 
> # Load data
> dat = MetabolomicsPipeline::demoDat
> 
> # Run pairwise analysis
> strat_pairwise = metabolite_pairwise(dat,form = "GROUP_NAME*TIME1",strat_var = "Gender")
Warning in summary.lm(object, ...) :
  essentially perfect fit: summary may be unreliable
Warning in summary.lm(object, ...) :
  essentially perfect fit: summary may be unreliable
Warning in summary.lm(object, ...) :
  essentially perfect fit: summary may be unreliable
Warning in summary.lm(object, ...) :
  essentially perfect fit: summary may be unreliable
Warning in summary.lm(object, ...) :
  essentially perfect fit: summary may be unreliable
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("metabolite_pca")
> ### * metabolite_pca
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: metabolite_pca
> ### Title: Metabolite PCA
> ### Aliases: metabolite_pca
> 
> ### ** Examples
> 
> 
> # load data
> dat = MetabolomicsPipeline::demoDat
> 
> # Define PCA label from metadata
>  meta_var = "Gender"
> 
> # Run PCA
> pca <- metabolite_pca( dat,
+                       meta_var = meta_var)
> 
> 
> # Show PCA
> pca
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("subpathway_analysis")
> ### * subpathway_analysis
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: subpathway_analysis
> ### Title: Subpathway Analysis
> ### Aliases: subpathway_analysis
> 
> ### ** Examples
> 
> 
> # Load data
> dat = MetabolomicsPipeline::demoDat
> 
> # Run subpathway analysis
> stratified = subpathway_analysis(dat,
+   treat_var = "GROUP_NAME",
+   block_var = "TIME1",
+   strat_var = NULL,
+   Assay = "normalized")
>   
> ################################################################################
> ### Results Plots ##############################################################
> ################################################################################
> 
> # significant subpathways by model type
> subpath_by_model(stratified)
<table class=" lightable-paper" style="font-family: Cambria; width: auto !important; margin-left: auto; margin-right: auto;">
<caption>Sigificant Pathways by Model</caption>
 <thead>
  <tr>
   <th style="text-align:left;"> Model Type </th>
   <th style="text-align:right;"> Count </th>
  </tr>
 </thead>
<tbody>
  <tr>
   <td style="text-align:left;"> Interaction </td>
   <td style="text-align:right;"> 79 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> Parallel </td>
   <td style="text-align:right;"> 10 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> Single </td>
   <td style="text-align:right;"> 7 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> None </td>
   <td style="text-align:right;"> 14 </td>
  </tr>
</tbody>
</table>> 
> # Percentage of signficant subpathways within superpathways
> subpath_within_superpath(stratified)
<table class=" lightable-paper" style="font-family: Cambria; width: auto !important; margin-left: auto; margin-right: auto;">
<caption>Proportion of significant subpathways within super-pathways</caption>
 <thead>
  <tr>
   <th style="text-align:left;"> Super Pathway </th>
   <th style="text-align:left;"> Percent Significant </th>
  </tr>
 </thead>
<tbody>
  <tr>
   <td style="text-align:left;"> Amino Acid </td>
   <td style="text-align:left;"> 16 / 16 (100%) </td>
  </tr>
  <tr>
   <td style="text-align:left;"> Energy </td>
   <td style="text-align:left;"> 2 / 2 (100%) </td>
  </tr>
  <tr>
   <td style="text-align:left;"> Partially Characterized Molecules </td>
   <td style="text-align:left;"> 1 / 1 (100%) </td>
  </tr>
  <tr>
   <td style="text-align:left;"> Xenobiotics </td>
   <td style="text-align:left;"> 5 / 5 (100%) </td>
  </tr>
  <tr>
   <td style="text-align:left;"> Nucleotide </td>
   <td style="text-align:left;"> 7 / 8 (87.5%) </td>
  </tr>
  <tr>
   <td style="text-align:left;"> Lipid </td>
   <td style="text-align:left;"> 45 / 53 (84.91%) </td>
  </tr>
  <tr>
   <td style="text-align:left;"> Cofactors and Vitamins </td>
   <td style="text-align:left;"> 9 / 11 (81.82%) </td>
  </tr>
  <tr>
   <td style="text-align:left;"> Peptide </td>
   <td style="text-align:left;"> 4 / 5 (80%) </td>
  </tr>
  <tr>
   <td style="text-align:left;"> Carbohydrate </td>
   <td style="text-align:left;"> 6 / 8 (75%) </td>
  </tr>
</tbody>
</table>> 
> 
> 
> 
> 
> cleanEx()
> nameEx("subpathway_boxplots")
> ### * subpathway_boxplots
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: subpathway_boxplots
> ### Title: Subpathway Boxplots
> ### Aliases: subpathway_boxplots
> 
> ### ** Examples
> 
> # load data
> dat = MetabolomicsPipeline::demoDat
> 
> ################################################################################
> ### BoxPlots ###################################################################
> ################################################################################
> 
> subpathway_boxplots(dat, subpathway = "Lactoyl Amino Acid", block_var = TIME1,
+                    treat_var = GROUP_NAME, Assay = "normalized",Gender =="Female")
> 
> 
> ################################################################################
> ## Line plots ##################################################################
> ################################################################################
> 
> # Set up data
> dat$TIME1 <- as.numeric(factor(dat$TIME1,
+                               levels = c("PreSymp","Onset","End")))
> # Create line plots 
> subpathway_lineplots(dat, subpathway = "Lactoyl Amino Acid",
+                     block_var = TIME1,treat_var = GROUP_NAME, Assay = "normalized",Gender=="Female" ) 
`geom_smooth()` using formula = 'y ~ x'
> 
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("subpathway_lineplots")
> ### * subpathway_lineplots
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: subpathway_lineplots
> ### Title: Subpathway Lineplots
> ### Aliases: subpathway_lineplots
> 
> ### ** Examples
> 
> #' # load data
> dat = MetabolomicsPipeline::demoDat
> 
> ################################################################################
> ### BoxPlots ###################################################################
> ################################################################################
> 
> subpathway_boxplots(dat, subpathway = "Lactoyl Amino Acid", block_var = TIME1,
+                    treat_var = GROUP_NAME, Assay = "normalized",Gender =="Female")
> 
> 
> ################################################################################
> ## Line plots ##################################################################
> ################################################################################
> 
> # Set up data
> dat$TIME1 <- as.numeric(factor(dat$TIME1,
+                               levels = c("PreSymp","Onset","End")))
> # Create line plots 
> subpathway_lineplots(dat, subpathway = "Lactoyl Amino Acid",
+                     block_var = TIME1,treat_var = GROUP_NAME, Assay = "normalized",Gender=="Female" )
`geom_smooth()` using formula = 'y ~ x'
> 
> 
> 
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  111.366 0.778 114.614 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
